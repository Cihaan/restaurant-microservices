services:
  auth-postgres:
    image: postgres
    container_name: restaurant-auth-db
    env_file: .env
    environment:
      - POSTGRES_DB=${AUTH_SERVICE_POSTGRES_DATABASE}
      - POSTGRES_USER=${AUTH_SERVICE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${AUTH_SERVICE_POSTGRES_PASSWORD}
    ports:
      - '${AUTH_SERVICE_POSTGRES_PORT}:5432'
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - restaurant-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${AUTH_SERVICE_POSTGRES_PASSWORD}']
      interval: 10s
      timeout: 5s
      retries: 5

  auth-redis:
    image: redis
    container_name: restaurant-auth-cache
    command: redis-server --requirepass ${AUTH_SERVICE_REDIS_PASSWORD} --appendonly yes
    environment:
      REDIS_PASSWORD: ${AUTH_SERVICE_REDIS_PASSWORD}
    ports:
      - ${AUTH_SERVICE_REDIS_PORT}
    volumes:
      - auth_redis_data:/data
    restart: unless-stopped
    networks:
      - restaurant-network
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', '${AUTH_SERVICE_REDIS_PASSWORD}', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  auth-service:
    build:
      context: ./packages/auth-service
      dockerfile: Dockerfile
    container_name: restaurant-auth-api
    environment:
      PORT: ${AUTH_SERVICE_PORT}
      NODE_ENV: ${AUTH_SERVICE_NODE_ENV}
      GOOGLE_CLIENT_ID: ${AUTH_SERVICE_GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${AUTH_SERVICE_GOOGLE_CLIENT_SECRET}
      SESSION_SECRET: ${AUTH_SERVICE_SESSION_SECRET}
      REDIS_HOST: auth-redis
      REDIS_PORT: ${AUTH_SERVICE_REDIS_PORT}
      REDIS_PASSWORD: ${AUTH_SERVICE_REDIS_PASSWORD}
      DB_HOST: auth-postgres
      DB_DATABASE: ${AUTH_SERVICE_POSTGRES_DATABASE}
      DB_PORT: ${AUTH_SERVICE_POSTGRES_PORT}
      DB_USER: ${AUTH_SERVICE_POSTGRES_USER}
      DB_PASSWORD: ${AUTH_SERVICE_POSTGRES_PASSWORD}
    ports:
      - '${AUTH_SERVICE_PORT}:3333'
    depends_on:
      auth-postgres:
        condition: service_healthy
      auth-redis:
        condition: service_healthy
    volumes:
      - ./packages/auth-service:/app
      - /app/node_modules
    restart: unless-stopped
    networks:
      - restaurant-network
    healthcheck:
      test:
        ['CMD', 'curl', '-f', 'http://localhost:${AUTH_SERVICE_PORT}/health']
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.auth-service.rule=PathPrefix(`/api/auth`)'
      - 'traefik.http.routers.auth-service.entrypoints=web'
      - 'traefik.http.services.auth-service.loadbalancer.server.port=3333'

  traefik:
    image: traefik:v2.5
    container_name: traefik
    command:
      - '--api.insecure=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--entrypoints.web.address=:80'
    ports:
      - '${TRAEFIK_HTTP_PORT}:80'
      - '${TRAEFIK_DASHBOARD_PORT}:8080'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - restaurant-network
    healthcheck:
      test: ['CMD', 'traefik', 'healthcheck', '--ping']
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  auth_postgres_data:
  auth_redis_data:

networks:
  restaurant-network:
    driver: bridge
